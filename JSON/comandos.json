{
    "GradeProdCorrecao": {
        "descricao": "Este comando serve para caso o cliente tenha esquecido de clicar em 'Sem grade' após cadastrar um produto, e ele localiza todos os produtos que estão assim, e cria a grade 'sem grade'. OBS: Caso tenha mais de uma filial, consultar o comando FILIAL ESTOQUE DE CORREÇÃO.",
        "comando": "INSERT INTO gradeProd (codigoBase,codigoCor,codigoTamanho,codigoGrade,codigoBarra,filiaisPendentes,descricaoGrade,gradeVendaPrc,gradeQtdMinima,gradeAtivo,GRADEDATAINCLUSAO) SELECT codigo, '0', '0', codigo, codigoBarraProduto, 0, descricao, vendaprc, 0, '1', DATAINCLUSAO FROM produto WHERE codigo NOT IN (SELECT codigograde FROM gradeprod)"
    },
    "FilialEstoqueCorrecao": {
        "descricao": "Este comando serve para complementar o comando GradeProdCorreção. A interrogração deve ser substituida pelo idFilial da quantidade de filiais que o cliente possuir e o comando deverá ser rodado uma vez para cada filial",
        "comando": "insert into filialEstoque (prodCodigo,idFilial,qtdDisp,qtdEst,qtdReserv,qtdAssist,qtdPed, entradas,saidas,filiaisPendentes,qtddispbal,qtdconsignacao,qtddev,qtdinicio) select codigograde,?,0,0,0,0,0,0,0,0,0,0,0,0 from gradeprod where codigograde not in (select prodCodigo from filialEstoque where idfilial=?)"
    },
    "FiliaisPendentes": {
        "descricao": "Este comando roda o filiais pendentes já calculado automáticamente para todas as filiais. Deve ser rodado no servidor e só precisa ser trocado o nome da tabela onde está escrito TABELA",
        "comando": "update TABELA set filiaispendentes=filiaispendentes | (select (power(2,(select max(idfilial)-1 from filial))*2)-2)"
    },
    "ativarMigrate": {
        "descricao": "Ativar o MIGRATE de forma mais rápida do que entrando nos parametros um a um. OBS: Substituir a interrogação pela chave de acesso gerada para o cliente.",
        "comando": "UPDATE PARAMETRO SET VALOR='?' WHERE PARAMETRO='CHAVEACESSOMIGRATE'\r\nGO\r\nUPDATE PARAMETRO SET VALOR='6YO62RZj4g4uX0l0kq+vNw==' WHERE PARAMETRO='CHAVEPARCEIROMIGRATE'\r\nGO\r\nUPDATE PARAMETRO SET VALOR='1' WHERE PARAMETRO IN ('USANFCEMIGRATE', 'USANFEMIGRATE')"
    },
    "mudarSerie": {
        "descricao": "Mudar número de série através de comando. O comando aumenta 2 em cada parametro de numero de série (Ex: o que era 1 fica 3, o que era 2 fica 4)",
        "comando": "update parametro set valor=valor+2 where parametro in\r\n(\r\n'SERIENFCE',\r\n'SERIENFENTRADA',\r\n'SERIENFSAIDA'\r\n)"
    },
    "BackupBancos63SPED": {
        "descricao": "Lista de bancos utilizados dentro do servidor 63 para backup. Salvo na pasta C:/backup/. OBS: APENAS SPED",
        "comando": "DECLARE @path VARCHAR(256) -- path for backup files\r\nDECLARE @fileName VARCHAR(256) -- filename for backup\r\nDECLARE @fileDate VARCHAR(20) -- used for file name\r\nDECLARE @Name VARCHAR(256)\r\n\r\n-- Especifica o diretório para o backup dos bancos\r\nSET @path = 'C:\\Backup\\'\r\n\r\n-- Especifica o formato do arquivo\r\nSELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)\r\n\r\nDECLARE db_cursor CURSOR FOR\r\nSELECT name\r\nFROM master.dbo.sysdatabases\r\nWHERE name IN ('BDComercialPernambucoRacoes','BDcomercialMaison','BDComercialMpDistribuidora','BDComercialMpRepresentacoes','BDComercialNossoCondimento','BDComercialEfrainColchoes','BDComercialRecifeGraos','BDComercialNacionalDistribuidora','BDComercialAutomaqIndustrial','BDComercialArmazemMares','BDComercialMNPlastico','BDComercialAtacadaoDaMadeira','BDComercialNossoCondimento','BDComercialCasaRevestPb','BDComercialViaTextil')\r\n\r\nOPEN db_cursor\r\nFETCH NEXT FROM db_cursor INTO @name\r\n\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n       SET @fileName = @path + @name + '_' + @fileDate + '.BAK'\r\n       BACKUP DATABASE @name TO DISK = @fileName\r\n\r\n       FETCH NEXT FROM db_cursor INTO @name\r\nEND\r\n\r\nCLOSE db_cursor\r\nDEALLOCATE db_cursor"
    },
    "BackupBancos216SPED": {
        "descricao": "Lista de bancos utilizados dentro do servidor 216 para backup. Salvo na pasta C:/backup/. OBS: APENAS SPED",
        "comando": "DECLARE @path VARCHAR(256) -- path for backup files\r\nDECLARE @fileName VARCHAR(256) -- filename for backup\r\nDECLARE @fileDate VARCHAR(20) -- used for file name\r\nDECLARE @Name VARCHAR(256)\r\n\r\n-- Especifica o diretório para o backup dos bancos\r\nSET @path = 'C:\\Backup\\'\r\n\r\n-- Especifica o formato do arquivo\r\nSELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)\r\n\r\nDECLARE db_cursor CURSOR FOR\r\nSELECT name\r\nFROM master.dbo.sysdatabases\r\nWHERE name IN ('BDComercialComandoDasBombas','BDComercialTagsInformatica','BDComercialAutomaqMaranhao','BDComercialAutomaqRecife')\r\n\r\nOPEN db_cursor\r\nFETCH NEXT FROM db_cursor INTO @name\r\n\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n       SET @fileName = @path + @name + '_' + @fileDate + '.BAK'\r\n       BACKUP DATABASE @name TO DISK = @fileName\r\n\r\n       FETCH NEXT FROM db_cursor INTO @name\r\nEND\r\n\r\nCLOSE db_cursor\r\nDEALLOCATE db_cursor"
    },
    "BackupBancos74SPED": {
        "descricao": "Lista de bancos utilizados dentro do servidor 74 para backup. Salvo na pasta C:/backup/. OBS: APENAS SPED",
        "comando": "DECLARE @path VARCHAR(256) -- path for backup files\r\nDECLARE @fileName VARCHAR(256) -- filename for backup\r\nDECLARE @fileDate VARCHAR(20) -- used for file name\r\nDECLARE @Name VARCHAR(256)\r\n\r\n-- Especifica o diretório para o backup dos bancos\r\nSET @path = 'C:\\Backup\\'\r\n\r\n-- Especifica o formato do arquivo\r\nSELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)\r\n\r\nDECLARE db_cursor CURSOR FOR\r\nSELECT name\r\nFROM master.dbo.sysdatabases\r\nWHERE name IN ('BDComercialRecifeBike','BDComercialOficioTextilF','BDComercialToyolinda','BDComercialUchoaConstrucoes','BDComercialSouzaMissangasFerragens')\r\n\r\nOPEN db_cursor\r\nFETCH NEXT FROM db_cursor INTO @name\r\n\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n       SET @fileName = @path + @name + '_' + @fileDate + '.BAK'\r\n       BACKUP DATABASE @name TO DISK = @fileName\r\n\r\n       FETCH NEXT FROM db_cursor INTO @name\r\nEND\r\n\r\nCLOSE db_cursor\r\nDEALLOCATE db_cursor"
    },
    "BackupBancos138SPED": {
        "descricao": "Lista de bancos utilizados dentro do servidor 138 para backup. Salvo na pasta C:/backup/. OBS: APENAS SPED",
        "comando": "DECLARE @path VARCHAR(256) -- path for backup files\r\nDECLARE @fileName VARCHAR(256) -- filename for backup\r\nDECLARE @fileDate VARCHAR(20) -- used for file name\r\nDECLARE @Name VARCHAR(256)\r\n\r\n-- Especifica o diretório para o backup dos bancos\r\nSET @path = 'C:\\Backup\\'\r\n\r\n-- Especifica o formato do arquivo\r\nSELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)\r\n\r\nDECLARE db_cursor CURSOR FOR\r\nSELECT name\r\nFROM master.dbo.sysdatabases\r\nWHERE name IN ('BDComercialFastMotos','BDComercialA&VDistribuidora','BDComercialTecidosMatrizF','BDComercialSapatoBoaVista','BDComercialFastMotos','BDComercialOticaBoaVista','BDComercialOvosMassape','BDComercialCiaoFormen','BDComercialVertRougeServidor')\r\n\r\nOPEN db_cursor\r\nFETCH NEXT FROM db_cursor INTO @name\r\n\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n       SET @fileName = @path + @name + '_' + @fileDate + '.BAK'\r\n       BACKUP DATABASE @name TO DISK = @fileName\r\n\r\n       FETCH NEXT FROM db_cursor INTO @name\r\nEND\r\n\r\nCLOSE db_cursor\r\nDEALLOCATE db_cursor"
    },
    "BackupVariosBancosSimultaneo": {
        "descricao": "Fazer backup de vários bancos simultaneamente salvando dentro na pasta C:/backup/. \r\nOBS: Substituir a interrogação (?) pelo nome dos bancos que vai querer o backup, separando por vírgulas, e entre aspas simples ",
        "comando": "DECLARE @path VARCHAR(256) -- path for backup files\r\nDECLARE @fileName VARCHAR(256) -- filename for backup\r\nDECLARE @fileDate VARCHAR(20) -- used for file name\r\nDECLARE @Name VARCHAR(256)\r\n\r\n-- Especifica o diretório para o backup dos bancos\r\nSET @path = 'C:\\Backup\\'\r\n\r\n-- Especifica o formato do arquivo\r\nSELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)\r\n\r\nDECLARE db_cursor CURSOR FOR\r\nSELECT name\r\nFROM master.dbo.sysdatabases\r\nWHERE name IN ('?','?','?','?')\r\n\r\nOPEN db_cursor\r\nFETCH NEXT FROM db_cursor INTO @name\r\n\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n       SET @fileName = @path + @name + '_' + @fileDate + '.BAK'\r\n       BACKUP DATABASE @name TO DISK = @fileName\r\n\r\n       FETCH NEXT FROM db_cursor INTO @name\r\nEND\r\n\r\nCLOSE db_cursor\r\nDEALLOCATE db_cursor"
    },
    "scriptMultiLoja": {
        "descricao": "Script para transformar o servidor WEB em um sistema multiloja. Deverá estar no servidor 63. Preferencial rodar o script um comando de cada vez para ver se alguma linha deu erro.",
        "comando": "alter table filial add inscMunicip char(20)\r\n go\r\n alter table filial add deposito char(1)\r\n go\r\n alter table filial add crt char(1)\r\n go\r\n update filial set crt='3', deposito='0'\r\n go\r\n drop table empresa\r\n go\r\n ALTER Procedure [dbo].[SP_MANIPULA_ID_DEV_VENDA](@ID Int OUTPUT)as begin\r\n IF not EXISTS (SELECT * FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'DEV_VENDA_ID')\r\n BEGIN\r\n CREATE TABLE DEV_VENDA_ID (NEW_ID int NOT NULL PRIMARY KEY, NEW_ID_DEV_VENDA int NULL)\r\n Insert into DEV_VENDA_ID (NEW_ID) values(0)\r\n Update DEV_VENDA_ID Set NEW_ID = (Select COALESCE(max(idDevolucao),0) + 1 from devolucao)\r\n END\r\n BEGIN TRANSACTION; Select @ID = NEW_ID From DEV_VENDA_ID With (UPDLOCK, HOLDLOCK) WAITFOR DELAY '00:00:01.0';\r\n Update DEV_VENDA_ID Set NEW_ID = NEW_ID + 1;COMMIT;\r\n end\r\n go\r\n Update DEV_VENDA_ID Set NEW_ID = (Select COALESCE(max(idDevolucao),0) + 1 from devolucao)\r\n go\r\n ALTER Procedure [dbo].[SP_MANIPULA_ID_VENDA](@ID Int OUTPUT)as\r\n begin\r\n IF not EXISTS (SELECT * FROM SYSOBJECTS WHERE XTYPE = 'U' AND NAME = 'PEDIDO_VENDA_ID')\r\n BEGIN\r\n CREATE TABLE PEDIDO_VENDA_ID (NEW_ID int NOT NULL PRIMARY KEY, NEW_ID_PRE_VENDA int NULL)\r\n Insert into PEDIDO_VENDA_ID (NEW_ID) values(0)\r\n Update PEDIDO_VENDA_ID Set NEW_ID = (Select COALESCE(max(idvenda),0) + 1 from venda)\r\n Insert into PEDIDO_VENDA_ID (NEW_ID_PRE_VENDA) values(0)\r\n Update PEDIDO_VENDA_ID Set NEW_ID_PRE_VENDA = (Select COALESCE(max(numeropv),0) + 1 from venda)\r\n END\r\n Select @ID = NEW_ID From PEDIDO_VENDA_ID With (UPDLOCK, HOLDLOCK) WAITFOR DELAY '00:00:00.100';\r\n Update PEDIDO_VENDA_ID Set NEW_ID = NEW_ID + 1;\r\n end\r\n go\r\n Update PEDIDO_VENDA_ID Set NEW_ID = (Select COALESCE(max(idvenda),0) + 1 from venda)\r\n go\r\n Update PEDIDO_VENDA_ID Set NEW_ID_PRE_VENDA = (Select COALESCE(max(numeropv),0) + 1 from venda)\r\n go\r\n alter table historiconf alter column CNPJEMISSOR varchar(20)\r\n go\r\n IF NOT EXISTS (select * from sysobjects where name='tabelasPrecoFilial' and xtype='U')\r\n CREATE TABLE dbo.tabelasPrecoFilial(\r\n ID int NOT NULL,\r\n IDFILIAL smallint NOT NULL,\r\n TABELA char(15) NULL,\r\n PRIMARY KEY (ID)\r\n )\r\n go\r\n alter table configuracao add versaoScriptCdsWeb int\r\n go\r\n INSERT [dbo].[tabelasPrecoFilial] ([ID], [IDFILIAL], [TABELA]) VALUES (1, 1, N'1')\r\n INSERT [dbo].[tabelasPrecoFilial] ([ID], [IDFILIAL], [TABELA]) VALUES (2, 1, N'2')\r\n INSERT [dbo].[tabelasPrecoFilial] ([ID], [IDFILIAL], [TABELA]) VALUES (3, 1, N'3')\r\n INSERT [dbo].[tabelasPrecoFilial] ([ID], [IDFILIAL], [TABELA]) VALUES (4, 2, N'1')\r\n INSERT [dbo].[tabelasPrecoFilial] ([ID], [IDFILIAL], [TABELA]) VALUES (5, 2, N'2')\r\n INSERT [dbo].[tabelasPrecoFilial] ([ID], [IDFILIAL], [TABELA]) VALUES (6, 2, N'3')\r\n INSERT [dbo].[tabelasPrecoFilial] ([ID], [IDFILIAL], [TABELA]) VALUES (7, 3, N'1')\r\n INSERT [dbo].[tabelasPrecoFilial] ([ID], [IDFILIAL], [TABELA]) VALUES (8, 3, N'2')\r\n INSERT [dbo].[tabelasPrecoFilial] ([ID], [IDFILIAL], [TABELA]) VALUES (9, 3, N'3')"
    },
    "selectUltimasVendasFilial": {
        "descricao": "Select para rodar em um banco servidor e descobrir qual a ultima venda de cada filial, junto com o idFilial, nomeFantasia e idVenda",
        "comando": "WITH CTE AS (\r\n    SELECT v.idfilial, v.idvenda, v.dataVenda, ROW_NUMBER() OVER (PARTITION BY v.idfilial ORDER BY v.dataVenda DESC) AS rn\r\n    FROM venda v\r\n)\r\nSELECT c.idfilial, f.nomefantasia, c.idvenda, c.dataVenda\r\nFROM CTE c\r\nJOIN filial f ON c.idfilial = f.idfilial\r\nWHERE c.rn = 1\r\nORDER BY c.dataVenda DESC;"
    },
    "configurarApenasConsulta": {
        "descricao": "Comando para configurar um banco para se tornar APENAS CONSULTA. Uma imagem irá aparecer na tela inicial informando que o banco terá essa finalidade. Para baixar essa imagem, vá no link de downloads e procure por APENASCONSULTA.bmp",
        "comando": "UPDATE EMPRESA SET LOGOCAMINHO='C:\\Program Files\\CDS\\Comercial\\APENASCONSULTA.bmp'\r\ngo\r\nupdate parametro set valor='0' where parametro in ('usanfe','usanfce','permitevendad1')"
    },
    "darSelectRetornandoUpdate": {
        "descricao": "Com esse comando voce consegue dar um SELECT na tabela parametro de algum bando e ele retorna nos resultados um update montado para habilitar os mesmos parametros em outro banco",
        "comando": "SELECT 'update parametro set valor=''1'' where parametro=''' + LTRIM(RTRIM(parametro)) + ''''\r\nFROM parametro\r\nWHERE valor='1';"
    },
    "neoProViewCiao": {
        "descricao": "Configurar o NEO PRO no banco de dados da CIAO. Ao copiar o comando, atentar para colocar o idFilial da filial que está sendo configurado essa VIEW",
        "comando": "CREATE VIEW [dbo].[vendasProft] AS\r\nselect datavenda,cpf,funcionario, sum(totalvenda) as totalVenda, sum(qtd_item) as qtd_item , sum(quantidadevenda) as quantidadeVenda from (\r\nSELECT dbo.venda.dataVenda, REPLACE(REPLACE(REPLACE(dbo.funcionario.cpf, '.', ''), '-', ''), '/', '') AS cpf, dbo.venda.funcionario,\r\nSUM(vp.qtd * vp.prcUnit - ((vp.qtd * vp.prcUnit * vp.descPerc / 100 + vp.descValor) + (vp.qtd * vp.prcUnit - vp.qtd * vp.prcUnit * vp.descPerc / 100 - vp.descValor)\r\n* (dbo.venda.descValor / dbo.venda.total * 100) / 100)) AS totalVenda, SUM(vp.qtd) AS qtd_item, COUNT(DISTINCT dbo.venda.idVenda) AS quantidadeVenda\r\nFROM dbo.venda INNER JOIN\r\ndbo.lancamento ON dbo.lancamento.idOperacao = dbo.venda.idVenda AND dbo.lancamento.idFilial = dbo.venda.idFilial AND dbo.lancamento.operacao = 'venda' INNER JOIN\r\ndbo.vendaProd AS vp ON dbo.venda.idVenda = vp.idVenda AND dbo.venda.idFilial = vp.idFilial INNER JOIN\r\ndbo.funcionario ON dbo.venda.funcionario = dbo.funcionario.funcionario\r\nWHERE (dbo.venda.finalizado = '1') AND (dbo.venda.invalidado = '0') AND (dbo.venda.idFilial = (select idempresa from empresa))\r\nGROUP BY dbo.venda.dataVenda, dbo.venda.funcionario, REPLACE(REPLACE(REPLACE(dbo.funcionario.cpf, '.', ''), '-', ''), '/', '')\r\nunion\r\nSELECT d.datadevolucao, REPLACE(REPLACE(REPLACE(funcionario.cpf, '.', ''), '-', ''), '/', '') AS cpf,\r\nd.funcionario,\r\nSUM((((dp.qtd + dp.qtdAssist) * dp.prcunit - ((dp.qtd + dp.qtdAssist) * dp.prcUnit * dp.descPerc/100) - dp.descValor) - (((dp.qtd + dp.qtdAssist) * dp.prcunit - ((dp.qtd + dp.qtdAssist) * dp.prcUnit * dp.descPerc/100) - dp.descValor) * d.descDevolucaoPerc)/100))*-1 as totalVenda,\r\nSUM(dp.qtd)*-1 AS qtd_item,\r\n0 AS quantidadeVenda\r\nFROM devolucao d\r\nINNER JOIN devolucaoProd dp ON dp.idDevolucao = d.idDevolucao\r\nINNER JOIN funcionario ON d.funcionario = funcionario.funcionario\r\nAND dp.idFilial = d.idFilial\r\nWHERE d.idFilial = (select idempresa from empresa)\r\nAND d.invalidado = '0'\r\nAND d.finalizado = '1'\r\nGROUP BY d.datadevolucao, d.funcionario, REPLACE(REPLACE(REPLACE(dbo.funcionario.cpf, '.', ''), '-', ''), '/', '')\r\n) as vendasDevolucoes\r\ngroup by datavenda,cpf,funcionario\r\nGO"
    }
}
